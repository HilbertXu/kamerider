#!/usr/bin/env python

"""
     color_tracker.py - follow the color desired

"""

import roslib; roslib.load_manifest('cmvision')
import rospy
from geometry_msgs.msg import Twist
from cmvision.msg import Blobs

turn = 0.0
straight = 0.0
blob_position_x = 0
blob_position_y = 0

class Color_Tracker:
    def __init__(self):
        rospy.on_shutdown(self.cleanup)
        
	# publish twist messages to /cmd_vel
    	self.pub = rospy.Publisher('/mobile_base/commands/velocity', Twist)

    	#subscribe to the robot sensor state
    	rospy.Subscriber('/blobs', Blobs, self.callback)
    	self.message = Twist()

    	while not rospy.is_shutdown():
          # turn if we hit the line
          if ( turn != 0.0 ):
            self.message.linear.x = straight; self.message.linear.y = 0; self.message.linear.z = 0
            self.message.angular.x = 0.0; self.message.angular.y = 0; self.message.angular.z = turn

          # straight otherwise
          else:
            self.message.linear.x = straight; self.message.linear.y = 0; self.message.linear.z = 0
            self.message.angular.x = 0.0; self.message.angular.y = 0; self.message.angular.z = 0

          # send the message and delay
          self.pub.publish(self.message)
	  rospy.Rate(4).sleep()

    def callback(self, data):
        if(len(data.blobs)):
	    global turn
	    global straight
	    global blob_position_x
	    global blob_position_y

	    blob_position_x = 0
	    blob_position_y = 0
	    for obj in data.blobs:
	      blob_position_x = blob_position_x + obj.x
	      blob_position_y = blob_position_y + obj.y
	    blob_position_x = blob_position_x/len(data.blobs)
	    blob_position_y = blob_position_y/len(data.blobs)

	    #rospy.loginfo("blob is at x: %s"%blob_position_x)
	    rospy.loginfo("blob is at y: %s"%blob_position_y)
	    #rospy.loginfo(len(data.blobs))
	    # turn right if we set off the left cliff sensor
	    if( blob_position_x > 330 ):
	        turn = -0.4
	    # turn left if we set off the right cliff sensor
	    if( blob_position_x < 310 ):
	        turn = 0.4

	    if( blob_position_x > 310 and blob_position_x < 330):
	        turn = 0.0

	    if( blob_position_y > 430 ):
	        straight = -0.05

	    if( blob_position_y < 400 ):
	        straight = 0.05

	    if( blob_position_y > 400 and blob_position_y < 430):
	        straight = 0.0

        else:
	    turn = 0.0

    def cleanup(self):
        rospy.loginfo("Shutting down color tracking...")
        self.pub.publish(Twist())

if __name__=="__main__":
    rospy.init_node('color_tracker')
    try:
        Color_Tracker()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass

